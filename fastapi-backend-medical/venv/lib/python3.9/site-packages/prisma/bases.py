# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template models.py.jinja --
from pydantic import BaseModel

from . import fields, actions
from ._types import FuncType
from ._builder import serialize_base64
from ._compat import PYDANTIC_V2, ConfigDict

if TYPE_CHECKING:
    from .client import Prisma


_PrismaModelT = TypeVar('_PrismaModelT', bound='_PrismaModel')


class _PrismaModel(BaseModel):
    if PYDANTIC_V2:
        model_config: ClassVar[ConfigDict] = ConfigDict(
            use_enum_values=True,
            arbitrary_types_allowed=True,
            populate_by_name=True,
        )
    elif not TYPE_CHECKING:
        from ._compat import BaseConfig

        class Config(BaseConfig):
            use_enum_values: bool = True
            arbitrary_types_allowed: bool = True
            allow_population_by_field_name: bool = True
            json_encoders: Dict[Any, FuncType] = {
                fields.Base64: serialize_base64,
            }

    # TODO: ensure this is required by subclasses
    __prisma_model__: ClassVar[str]


class Baseactive_medications(_PrismaModel):
    __prisma_model__: ClassVar[Literal['active_medications']] = 'active_medications'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.active_medicationsActions[_PrismaModelT]':
        from .client import get_client

        return actions.active_medicationsActions[_PrismaModelT](client or get_client(), cls)


class Baseconfigs(_PrismaModel):
    __prisma_model__: ClassVar[Literal['configs']] = 'configs'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.configsActions[_PrismaModelT]':
        from .client import get_client

        return actions.configsActions[_PrismaModelT](client or get_client(), cls)


class Basehereditary_family_history(_PrismaModel):
    __prisma_model__: ClassVar[Literal['hereditary_family_history']] = 'hereditary_family_history'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.hereditary_family_historyActions[_PrismaModelT]':
        from .client import get_client

        return actions.hereditary_family_historyActions[_PrismaModelT](client or get_client(), cls)


class Baselab_results(_PrismaModel):
    __prisma_model__: ClassVar[Literal['lab_results']] = 'lab_results'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.lab_resultsActions[_PrismaModelT]':
        from .client import get_client

        return actions.lab_resultsActions[_PrismaModelT](client or get_client(), cls)


class Basemedical_consultation(_PrismaModel):
    __prisma_model__: ClassVar[Literal['medical_consultation']] = 'medical_consultation'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.medical_consultationActions[_PrismaModelT]':
        from .client import get_client

        return actions.medical_consultationActions[_PrismaModelT](client or get_client(), cls)


class Basenon_pathological_history(_PrismaModel):
    __prisma_model__: ClassVar[Literal['non_pathological_history']] = 'non_pathological_history'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.non_pathological_historyActions[_PrismaModelT]':
        from .client import get_client

        return actions.non_pathological_historyActions[_PrismaModelT](client or get_client(), cls)


class Basenutritional_diet(_PrismaModel):
    __prisma_model__: ClassVar[Literal['nutritional_diet']] = 'nutritional_diet'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.nutritional_dietActions[_PrismaModelT]':
        from .client import get_client

        return actions.nutritional_dietActions[_PrismaModelT](client or get_client(), cls)


class Baseobstetric_gynecological_history(_PrismaModel):
    __prisma_model__: ClassVar[Literal['obstetric_gynecological_history']] = 'obstetric_gynecological_history'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.obstetric_gynecological_historyActions[_PrismaModelT]':
        from .client import get_client

        return actions.obstetric_gynecological_historyActions[_PrismaModelT](client or get_client(), cls)


class Basepacientes(_PrismaModel):
    __prisma_model__: ClassVar[Literal['pacientes']] = 'pacientes'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.pacientesActions[_PrismaModelT]':
        from .client import get_client

        return actions.pacientesActions[_PrismaModelT](client or get_client(), cls)


class Basepathological_history(_PrismaModel):
    __prisma_model__: ClassVar[Literal['pathological_history']] = 'pathological_history'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.pathological_historyActions[_PrismaModelT]':
        from .client import get_client

        return actions.pathological_historyActions[_PrismaModelT](client or get_client(), cls)


class Basepatient_by_user(_PrismaModel):
    __prisma_model__: ClassVar[Literal['patient_by_user']] = 'patient_by_user'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.patient_by_userActions[_PrismaModelT]':
        from .client import get_client

        return actions.patient_by_userActions[_PrismaModelT](client or get_client(), cls)


class Baseperinatal_history(_PrismaModel):
    __prisma_model__: ClassVar[Literal['perinatal_history']] = 'perinatal_history'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.perinatal_historyActions[_PrismaModelT]':
        from .client import get_client

        return actions.perinatal_historyActions[_PrismaModelT](client or get_client(), cls)


class Basepostnatal_history(_PrismaModel):
    __prisma_model__: ClassVar[Literal['postnatal_history']] = 'postnatal_history'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.postnatal_historyActions[_PrismaModelT]':
        from .client import get_client

        return actions.postnatal_historyActions[_PrismaModelT](client or get_client(), cls)


class Basepsychiatric_history(_PrismaModel):
    __prisma_model__: ClassVar[Literal['psychiatric_history']] = 'psychiatric_history'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.psychiatric_historyActions[_PrismaModelT]':
        from .client import get_client

        return actions.psychiatric_historyActions[_PrismaModelT](client or get_client(), cls)


class Baseusers(_PrismaModel):
    __prisma_model__: ClassVar[Literal['users']] = 'users'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.usersActions[_PrismaModelT]':
        from .client import get_client

        return actions.usersActions[_PrismaModelT](client or get_client(), cls)


class Basevaccines(_PrismaModel):
    __prisma_model__: ClassVar[Literal['vaccines']] = 'vaccines'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.vaccinesActions[_PrismaModelT]':
        from .client import get_client

        return actions.vaccinesActions[_PrismaModelT](client or get_client(), cls)


class Basevital_signs(_PrismaModel):
    __prisma_model__: ClassVar[Literal['vital_signs']] = 'vital_signs'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.vital_signsActions[_PrismaModelT]':
        from .client import get_client

        return actions.vital_signsActions[_PrismaModelT](client or get_client(), cls)


class Baseketosis(_PrismaModel):
    __prisma_model__: ClassVar[Literal['ketosis']] = 'ketosis'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.ketosisActions[_PrismaModelT]':
        from .client import get_client

        return actions.ketosisActions[_PrismaModelT](client or get_client(), cls)


class Baselab_requests_and_image(_PrismaModel):
    __prisma_model__: ClassVar[Literal['lab_requests_and_image']] = 'lab_requests_and_image'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.lab_requests_and_imageActions[_PrismaModelT]':
        from .client import get_client

        return actions.lab_requests_and_imageActions[_PrismaModelT](client or get_client(), cls)


class Basemedical_diagnosis(_PrismaModel):
    __prisma_model__: ClassVar[Literal['medical_diagnosis']] = 'medical_diagnosis'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.medical_diagnosisActions[_PrismaModelT]':
        from .client import get_client

        return actions.medical_diagnosisActions[_PrismaModelT](client or get_client(), cls)


class Basemedical_prescription(_PrismaModel):
    __prisma_model__: ClassVar[Literal['medical_prescription']] = 'medical_prescription'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.medical_prescriptionActions[_PrismaModelT]':
        from .client import get_client

        return actions.medical_prescriptionActions[_PrismaModelT](client or get_client(), cls)


class Basemedical_prescription_detail(_PrismaModel):
    __prisma_model__: ClassVar[Literal['medical_prescription_detail']] = 'medical_prescription_detail'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.medical_prescription_detailActions[_PrismaModelT]':
        from .client import get_client

        return actions.medical_prescription_detailActions[_PrismaModelT](client or get_client(), cls)


class Basemedical_procedure(_PrismaModel):
    __prisma_model__: ClassVar[Literal['medical_procedure']] = 'medical_procedure'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.medical_procedureActions[_PrismaModelT]':
        from .client import get_client

        return actions.medical_procedureActions[_PrismaModelT](client or get_client(), cls)


class Basephsycal_examination(_PrismaModel):
    __prisma_model__: ClassVar[Literal['phsycal_examination']] = 'phsycal_examination'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.phsycal_examinationActions[_PrismaModelT]':
        from .client import get_client

        return actions.phsycal_examinationActions[_PrismaModelT](client or get_client(), cls)


class Basetopographic_exploration(_PrismaModel):
    __prisma_model__: ClassVar[Literal['topographic_exploration']] = 'topographic_exploration'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.topographic_explorationActions[_PrismaModelT]':
        from .client import get_client

        return actions.topographic_explorationActions[_PrismaModelT](client or get_client(), cls)


class Baselab_results_by_medical_consultation(_PrismaModel):
    __prisma_model__: ClassVar[Literal['lab_results_by_medical_consultation']] = 'lab_results_by_medical_consultation'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.lab_results_by_medical_consultationActions[_PrismaModelT]':
        from .client import get_client

        return actions.lab_results_by_medical_consultationActions[_PrismaModelT](client or get_client(), cls)


class Baseevent_patient(_PrismaModel):
    __prisma_model__: ClassVar[Literal['event_patient']] = 'event_patient'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.event_patientActions[_PrismaModelT]':
        from .client import get_client

        return actions.event_patientActions[_PrismaModelT](client or get_client(), cls)


class Baseevent_prospective_patient(_PrismaModel):
    __prisma_model__: ClassVar[Literal['event_prospective_patient']] = 'event_prospective_patient'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.event_prospective_patientActions[_PrismaModelT]':
        from .client import get_client

        return actions.event_prospective_patientActions[_PrismaModelT](client or get_client(), cls)


class Baseevents(_PrismaModel):
    __prisma_model__: ClassVar[Literal['events']] = 'events'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.eventsActions[_PrismaModelT]':
        from .client import get_client

        return actions.eventsActions[_PrismaModelT](client or get_client(), cls)


class Baseprospective_patients(_PrismaModel):
    __prisma_model__: ClassVar[Literal['prospective_patients']] = 'prospective_patients'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.prospective_patientsActions[_PrismaModelT]':
        from .client import get_client

        return actions.prospective_patientsActions[_PrismaModelT](client or get_client(), cls)


