# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off
from __future__ import annotations

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template client.py.jinja --
import warnings
import logging
from datetime import timedelta
from pathlib import Path
from types import TracebackType
from typing_extensions import override

from pydantic import BaseModel

from . import types, models, errors, actions
from ._base_client import BasePrisma, UseClientDefault, USE_CLIENT_DEFAULT
from .types import DatasourceOverride, HttpConfig, MetricsFormat
from ._types import BaseModelT, PrismaMethod, TransactionId, Datasource
from .bases import _PrismaModel
from ._builder import QueryBuilder, dumps
from .generator.models import EngineType, OptionalValueFromEnvVar, BinaryPaths
from ._compat import removeprefix, model_parse
from ._constants import CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED, DEFAULT_CONNECT_TIMEOUT, DEFAULT_TX_MAX_WAIT, DEFAULT_TX_TIMEOUT
from ._raw_query import deserialize_raw_results
from ._metrics import Metrics
from .metadata import PRISMA_MODELS, RELATIONAL_FIELD_MAPPINGS
from ._transactions import AsyncTransactionManager, SyncTransactionManager

# re-exports
from ._base_client import SyncBasePrisma, AsyncBasePrisma, load_env as load_env
from ._registry import (
    register as register,
    get_client as get_client,
    RegisteredClient as RegisteredClient,
)


__all__ = (
    'ENGINE_TYPE',
    'SCHEMA_PATH',
    'BINARY_PATHS',
    'Batch',
    'Prisma',
    'Client',
    'load_env',
    'register',
    'get_client',
)

log: logging.Logger = logging.getLogger(__name__)

SCHEMA_PATH = Path('/Users/wecom/Desktop/fastapi-backend-medical/prisma/schema.prisma')
PACKAGED_SCHEMA_PATH = Path(__file__).parent.joinpath('schema.prisma')
ENGINE_TYPE: EngineType = EngineType.binary
BINARY_PATHS = model_parse(BinaryPaths, {'queryEngine': {'darwin-arm64': '/Users/wecom/.cache/prisma-python/binaries/5.17.0/393aa359c9ad4a4bb28630fb5613f9c281cde053/node_modules/prisma/query-engine-darwin-arm64'}, 'introspectionEngine': {}, 'migrationEngine': {}, 'libqueryEngine': {}, 'prismaFmt': {}})


class Prisma(AsyncBasePrisma):
    # Note: these property names can be customised using `/// @Python(instance_name: '...')`
    # https://prisma-client-py.readthedocs.io/en/stable/reference/schema-extensions/#instance_name
    active_medications: 'actions.active_medicationsActions[models.active_medications]'
    configs: 'actions.configsActions[models.configs]'
    hereditary_family_history: 'actions.hereditary_family_historyActions[models.hereditary_family_history]'
    lab_results: 'actions.lab_resultsActions[models.lab_results]'
    medical_consultation: 'actions.medical_consultationActions[models.medical_consultation]'
    non_pathological_history: 'actions.non_pathological_historyActions[models.non_pathological_history]'
    nutritional_diet: 'actions.nutritional_dietActions[models.nutritional_diet]'
    obstetric_gynecological_history: 'actions.obstetric_gynecological_historyActions[models.obstetric_gynecological_history]'
    pacientes: 'actions.pacientesActions[models.pacientes]'
    pathological_history: 'actions.pathological_historyActions[models.pathological_history]'
    patient_by_user: 'actions.patient_by_userActions[models.patient_by_user]'
    perinatal_history: 'actions.perinatal_historyActions[models.perinatal_history]'
    postnatal_history: 'actions.postnatal_historyActions[models.postnatal_history]'
    psychiatric_history: 'actions.psychiatric_historyActions[models.psychiatric_history]'
    users: 'actions.usersActions[models.users]'
    vaccines: 'actions.vaccinesActions[models.vaccines]'
    vital_signs: 'actions.vital_signsActions[models.vital_signs]'
    ketosis: 'actions.ketosisActions[models.ketosis]'
    lab_requests_and_image: 'actions.lab_requests_and_imageActions[models.lab_requests_and_image]'
    medical_diagnosis: 'actions.medical_diagnosisActions[models.medical_diagnosis]'
    medical_prescription: 'actions.medical_prescriptionActions[models.medical_prescription]'
    medical_prescription_detail: 'actions.medical_prescription_detailActions[models.medical_prescription_detail]'
    medical_procedure: 'actions.medical_procedureActions[models.medical_procedure]'
    phsycal_examination: 'actions.phsycal_examinationActions[models.phsycal_examination]'
    topographic_exploration: 'actions.topographic_explorationActions[models.topographic_exploration]'
    lab_results_by_medical_consultation: 'actions.lab_results_by_medical_consultationActions[models.lab_results_by_medical_consultation]'
    event_patient: 'actions.event_patientActions[models.event_patient]'
    event_prospective_patient: 'actions.event_prospective_patientActions[models.event_prospective_patient]'
    events: 'actions.eventsActions[models.events]'
    prospective_patients: 'actions.prospective_patientsActions[models.prospective_patients]'

    __slots__ = (
        'active_medications',
        'configs',
        'hereditary_family_history',
        'lab_results',
        'medical_consultation',
        'non_pathological_history',
        'nutritional_diet',
        'obstetric_gynecological_history',
        'pacientes',
        'pathological_history',
        'patient_by_user',
        'perinatal_history',
        'postnatal_history',
        'psychiatric_history',
        'users',
        'vaccines',
        'vital_signs',
        'ketosis',
        'lab_requests_and_image',
        'medical_diagnosis',
        'medical_prescription',
        'medical_prescription_detail',
        'medical_procedure',
        'phsycal_examination',
        'topographic_exploration',
        'lab_results_by_medical_consultation',
        'event_patient',
        'event_prospective_patient',
        'events',
        'prospective_patients',
    )

    def __init__(
        self,
        *,
        use_dotenv: bool = True,
        log_queries: bool = False,
        auto_register: bool = False,
        datasource: DatasourceOverride | None = None,
        connect_timeout: int | timedelta = DEFAULT_CONNECT_TIMEOUT,
        http: HttpConfig | None = None,
    ) -> None:
        super().__init__(
            http=http,
            use_dotenv=use_dotenv,
            log_queries=log_queries,
            datasource=datasource,
            connect_timeout=connect_timeout,
        )
        self._set_generated_properties(
            schema_path=SCHEMA_PATH,
            engine_type=ENGINE_TYPE,
            prisma_models=PRISMA_MODELS,
            packaged_schema_path=PACKAGED_SCHEMA_PATH,
            relational_field_mappings=RELATIONAL_FIELD_MAPPINGS,
            preview_features=set([]),
            active_provider='mysql',
            default_datasource_name='db',
        )

        self.active_medications = actions.active_medicationsActions[models.active_medications](self, models.active_medications)
        self.configs = actions.configsActions[models.configs](self, models.configs)
        self.hereditary_family_history = actions.hereditary_family_historyActions[models.hereditary_family_history](self, models.hereditary_family_history)
        self.lab_results = actions.lab_resultsActions[models.lab_results](self, models.lab_results)
        self.medical_consultation = actions.medical_consultationActions[models.medical_consultation](self, models.medical_consultation)
        self.non_pathological_history = actions.non_pathological_historyActions[models.non_pathological_history](self, models.non_pathological_history)
        self.nutritional_diet = actions.nutritional_dietActions[models.nutritional_diet](self, models.nutritional_diet)
        self.obstetric_gynecological_history = actions.obstetric_gynecological_historyActions[models.obstetric_gynecological_history](self, models.obstetric_gynecological_history)
        self.pacientes = actions.pacientesActions[models.pacientes](self, models.pacientes)
        self.pathological_history = actions.pathological_historyActions[models.pathological_history](self, models.pathological_history)
        self.patient_by_user = actions.patient_by_userActions[models.patient_by_user](self, models.patient_by_user)
        self.perinatal_history = actions.perinatal_historyActions[models.perinatal_history](self, models.perinatal_history)
        self.postnatal_history = actions.postnatal_historyActions[models.postnatal_history](self, models.postnatal_history)
        self.psychiatric_history = actions.psychiatric_historyActions[models.psychiatric_history](self, models.psychiatric_history)
        self.users = actions.usersActions[models.users](self, models.users)
        self.vaccines = actions.vaccinesActions[models.vaccines](self, models.vaccines)
        self.vital_signs = actions.vital_signsActions[models.vital_signs](self, models.vital_signs)
        self.ketosis = actions.ketosisActions[models.ketosis](self, models.ketosis)
        self.lab_requests_and_image = actions.lab_requests_and_imageActions[models.lab_requests_and_image](self, models.lab_requests_and_image)
        self.medical_diagnosis = actions.medical_diagnosisActions[models.medical_diagnosis](self, models.medical_diagnosis)
        self.medical_prescription = actions.medical_prescriptionActions[models.medical_prescription](self, models.medical_prescription)
        self.medical_prescription_detail = actions.medical_prescription_detailActions[models.medical_prescription_detail](self, models.medical_prescription_detail)
        self.medical_procedure = actions.medical_procedureActions[models.medical_procedure](self, models.medical_procedure)
        self.phsycal_examination = actions.phsycal_examinationActions[models.phsycal_examination](self, models.phsycal_examination)
        self.topographic_exploration = actions.topographic_explorationActions[models.topographic_exploration](self, models.topographic_exploration)
        self.lab_results_by_medical_consultation = actions.lab_results_by_medical_consultationActions[models.lab_results_by_medical_consultation](self, models.lab_results_by_medical_consultation)
        self.event_patient = actions.event_patientActions[models.event_patient](self, models.event_patient)
        self.event_prospective_patient = actions.event_prospective_patientActions[models.event_prospective_patient](self, models.event_prospective_patient)
        self.events = actions.eventsActions[models.events](self, models.events)
        self.prospective_patients = actions.prospective_patientsActions[models.prospective_patients](self, models.prospective_patients)

        if auto_register:
            register(self)

    @property
    @override
    def _default_datasource(self) -> Datasource:
        return {
            'name': 'db',
            'url': OptionalValueFromEnvVar(**{'value': None, 'fromEnvVar': 'DATABASE_URL'}).resolve(),
            'source_file_path': '/Users/wecom/Desktop/fastapi-backend-medical/prisma/schema.prisma',
        }

    async def execute_raw(self, query: LiteralString, *args: Any) -> int:
        resp = await self._execute(
            method='execute_raw',
            arguments={
                'query': query,
                'parameters': args,
            },
            model=None,
        )
        return int(resp['data']['result'])

    @overload
    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> dict[str, Any]:
        ...

    @overload
    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
        model: Type[BaseModelT],
    ) -> Optional[BaseModelT]:
        ...

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
        model: Optional[Type[BaseModelT]] = None,
    ) -> Union[Optional[BaseModelT], dict[str, Any]]:
        """This function is the exact same as `query_raw()` but returns the first result.

        If model is given, the returned record is converted to the pydantic model first,
        otherwise a raw dictionary will be returned.
        """
        results: Sequence[Union[BaseModelT, dict[str, Any]]]
        if model is not None:
            results = await self.query_raw(query, *args, model=model)
        else:
            results = await self.query_raw(query, *args)

        if not results:
            return None

        return results[0]

    @overload
    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[dict[str, Any]]:
        ...

    @overload
    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
        model: Type[BaseModelT],
    ) -> List[BaseModelT]:
        ...

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
        model: Optional[Type[BaseModelT]] = None,
    ) -> Union[List[BaseModelT], List[dict[str, Any]]]:
        """Execute a raw SQL query against the database.

        If model is given, each returned record is converted to the pydantic model first,
        otherwise results will be raw dictionaries.
        """
        resp = await self._execute(
            method='query_raw',
            arguments={
                'query': query,
                'parameters': args,
            },
            model=model,
        )
        result = resp['data']['result']
        if model is not None:
            return deserialize_raw_results(result, model=model)

        return deserialize_raw_results(result)

    def batch_(self) -> Batch:
        """Returns a context manager for grouping write queries into a single transaction."""
        return Batch(client=self)

    def tx(
        self,
        *,
        max_wait: Union[int, timedelta] = DEFAULT_TX_MAX_WAIT,
        timeout: Union[int, timedelta] = DEFAULT_TX_TIMEOUT,
    ) -> TransactionManager:
        """Returns a context manager for executing queries within a database transaction.

        Entering the context manager returns a new Prisma instance wrapping all
        actions within a transaction, queries will be isolated to the Prisma instance and
        will not be commited to the database until the context manager exits.

        By default, Prisma will wait a maximum of 2 seconds to acquire a transaction from the database. You can modify this
        default with the `max_wait` argument which accepts a value in milliseconds or `datetime.timedelta`.

        By default, Prisma will cancel and rollback ay transactions that last longer than 5 seconds. You can modify this timeout
        with the `timeout` argument which accepts a value in milliseconds or `datetime.timedelta`.

        Example usage:

        ```py
        async with client.tx() as transaction:
            user1 = await client.user.create({'name': 'Robert'})
            user2 = await client.user.create({'name': 'Tegan'})
        ```

        In the above example, if the first database call succeeds but the second does not then neither of the records will be created.
        """
        return TransactionManager(
            client=self,
            max_wait=max_wait,
            timeout=timeout,
        )


TransactionManager = AsyncTransactionManager[Prisma]


# TODO: this should return the results as well
# TODO: don't require copy-pasting arguments between actions and batch actions
class Batch:
    active_medications: 'active_medicationsBatchActions'
    configs: 'configsBatchActions'
    hereditary_family_history: 'hereditary_family_historyBatchActions'
    lab_results: 'lab_resultsBatchActions'
    medical_consultation: 'medical_consultationBatchActions'
    non_pathological_history: 'non_pathological_historyBatchActions'
    nutritional_diet: 'nutritional_dietBatchActions'
    obstetric_gynecological_history: 'obstetric_gynecological_historyBatchActions'
    pacientes: 'pacientesBatchActions'
    pathological_history: 'pathological_historyBatchActions'
    patient_by_user: 'patient_by_userBatchActions'
    perinatal_history: 'perinatal_historyBatchActions'
    postnatal_history: 'postnatal_historyBatchActions'
    psychiatric_history: 'psychiatric_historyBatchActions'
    users: 'usersBatchActions'
    vaccines: 'vaccinesBatchActions'
    vital_signs: 'vital_signsBatchActions'
    ketosis: 'ketosisBatchActions'
    lab_requests_and_image: 'lab_requests_and_imageBatchActions'
    medical_diagnosis: 'medical_diagnosisBatchActions'
    medical_prescription: 'medical_prescriptionBatchActions'
    medical_prescription_detail: 'medical_prescription_detailBatchActions'
    medical_procedure: 'medical_procedureBatchActions'
    phsycal_examination: 'phsycal_examinationBatchActions'
    topographic_exploration: 'topographic_explorationBatchActions'
    lab_results_by_medical_consultation: 'lab_results_by_medical_consultationBatchActions'
    event_patient: 'event_patientBatchActions'
    event_prospective_patient: 'event_prospective_patientBatchActions'
    events: 'eventsBatchActions'
    prospective_patients: 'prospective_patientsBatchActions'

    def __init__(self, client: Prisma) -> None:
        self.__client = client
        self.__queries: List[str] = []
        self._active_provider = client._active_provider
        self.active_medications = active_medicationsBatchActions(self)
        self.configs = configsBatchActions(self)
        self.hereditary_family_history = hereditary_family_historyBatchActions(self)
        self.lab_results = lab_resultsBatchActions(self)
        self.medical_consultation = medical_consultationBatchActions(self)
        self.non_pathological_history = non_pathological_historyBatchActions(self)
        self.nutritional_diet = nutritional_dietBatchActions(self)
        self.obstetric_gynecological_history = obstetric_gynecological_historyBatchActions(self)
        self.pacientes = pacientesBatchActions(self)
        self.pathological_history = pathological_historyBatchActions(self)
        self.patient_by_user = patient_by_userBatchActions(self)
        self.perinatal_history = perinatal_historyBatchActions(self)
        self.postnatal_history = postnatal_historyBatchActions(self)
        self.psychiatric_history = psychiatric_historyBatchActions(self)
        self.users = usersBatchActions(self)
        self.vaccines = vaccinesBatchActions(self)
        self.vital_signs = vital_signsBatchActions(self)
        self.ketosis = ketosisBatchActions(self)
        self.lab_requests_and_image = lab_requests_and_imageBatchActions(self)
        self.medical_diagnosis = medical_diagnosisBatchActions(self)
        self.medical_prescription = medical_prescriptionBatchActions(self)
        self.medical_prescription_detail = medical_prescription_detailBatchActions(self)
        self.medical_procedure = medical_procedureBatchActions(self)
        self.phsycal_examination = phsycal_examinationBatchActions(self)
        self.topographic_exploration = topographic_explorationBatchActions(self)
        self.lab_results_by_medical_consultation = lab_results_by_medical_consultationBatchActions(self)
        self.event_patient = event_patientBatchActions(self)
        self.event_prospective_patient = event_prospective_patientBatchActions(self)
        self.events = eventsBatchActions(self)
        self.prospective_patients = prospective_patientsBatchActions(self)

    def _add(self, **kwargs: Any) -> None:
        builder = QueryBuilder(
            **kwargs,
            prisma_models=PRISMA_MODELS,
            relational_field_mappings=RELATIONAL_FIELD_MAPPINGS,
        )
        self.__queries.append(builder.build_query())

    async def commit(self) -> None:
        """Execute the queries"""
        # TODO: normalise this, we should still call client._execute
        queries = self.__queries
        self.__queries = []

        payload = {
            'batch': [
                {
                    'query': query,
                    'variables': {},
                }
                for query in queries
            ],
            'transaction': True,
        }
        await self.__client._engine.query(
            dumps(payload),
            tx_id=self.__client._tx_id,
        )

    def execute_raw(self, query: LiteralString, *args: Any) -> None:
        self._add(
            method='execute_raw',
            arguments={
                'query': query,
                'parameters': args,
            }
        )

    async def __aenter__(self) -> 'Batch':
        return self

    async def __aexit__(
        self,
        exc_type: Optional[Type[BaseException]],
        exc: Optional[BaseException],
        exc_tb: Optional[TracebackType],
    ) -> None:
        if exc is None:
            await self.commit()


# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class active_medicationsBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.active_medicationsCreateInput,
        include: Optional[types.active_medicationsInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.active_medications,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.active_medicationsCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.active_medications,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.active_medicationsWhereUniqueInput,
        include: Optional[types.active_medicationsInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.active_medications,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.active_medicationsUpdateInput,
        where: types.active_medicationsWhereUniqueInput,
        include: Optional[types.active_medicationsInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.active_medications,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.active_medicationsWhereUniqueInput,
        data: types.active_medicationsUpsertInput,
        include: Optional[types.active_medicationsInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.active_medications,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.active_medicationsUpdateManyMutationInput,
        where: types.active_medicationsWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.active_medications,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.active_medicationsWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.active_medications,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class configsBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.configsCreateInput,
        include: Optional[types.configsInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.configs,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.configsCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.configs,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.configsWhereUniqueInput,
        include: Optional[types.configsInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.configs,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.configsUpdateInput,
        where: types.configsWhereUniqueInput,
        include: Optional[types.configsInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.configs,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.configsWhereUniqueInput,
        data: types.configsUpsertInput,
        include: Optional[types.configsInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.configs,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.configsUpdateManyMutationInput,
        where: types.configsWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.configs,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.configsWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.configs,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class hereditary_family_historyBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.hereditary_family_historyCreateInput,
        include: Optional[types.hereditary_family_historyInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.hereditary_family_history,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.hereditary_family_historyCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.hereditary_family_history,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.hereditary_family_historyWhereUniqueInput,
        include: Optional[types.hereditary_family_historyInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.hereditary_family_history,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.hereditary_family_historyUpdateInput,
        where: types.hereditary_family_historyWhereUniqueInput,
        include: Optional[types.hereditary_family_historyInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.hereditary_family_history,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.hereditary_family_historyWhereUniqueInput,
        data: types.hereditary_family_historyUpsertInput,
        include: Optional[types.hereditary_family_historyInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.hereditary_family_history,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.hereditary_family_historyUpdateManyMutationInput,
        where: types.hereditary_family_historyWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.hereditary_family_history,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.hereditary_family_historyWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.hereditary_family_history,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class lab_resultsBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.lab_resultsCreateInput,
        include: Optional[types.lab_resultsInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.lab_results,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.lab_resultsCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.lab_results,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.lab_resultsWhereUniqueInput,
        include: Optional[types.lab_resultsInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.lab_results,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.lab_resultsUpdateInput,
        where: types.lab_resultsWhereUniqueInput,
        include: Optional[types.lab_resultsInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.lab_results,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.lab_resultsWhereUniqueInput,
        data: types.lab_resultsUpsertInput,
        include: Optional[types.lab_resultsInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.lab_results,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.lab_resultsUpdateManyMutationInput,
        where: types.lab_resultsWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.lab_results,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.lab_resultsWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.lab_results,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class medical_consultationBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.medical_consultationCreateInput,
        include: Optional[types.medical_consultationInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.medical_consultation,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.medical_consultationCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.medical_consultation,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.medical_consultationWhereUniqueInput,
        include: Optional[types.medical_consultationInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.medical_consultation,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.medical_consultationUpdateInput,
        where: types.medical_consultationWhereUniqueInput,
        include: Optional[types.medical_consultationInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.medical_consultation,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.medical_consultationWhereUniqueInput,
        data: types.medical_consultationUpsertInput,
        include: Optional[types.medical_consultationInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.medical_consultation,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.medical_consultationUpdateManyMutationInput,
        where: types.medical_consultationWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.medical_consultation,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.medical_consultationWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.medical_consultation,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class non_pathological_historyBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.non_pathological_historyCreateInput,
        include: Optional[types.non_pathological_historyInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.non_pathological_history,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.non_pathological_historyCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.non_pathological_history,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.non_pathological_historyWhereUniqueInput,
        include: Optional[types.non_pathological_historyInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.non_pathological_history,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.non_pathological_historyUpdateInput,
        where: types.non_pathological_historyWhereUniqueInput,
        include: Optional[types.non_pathological_historyInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.non_pathological_history,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.non_pathological_historyWhereUniqueInput,
        data: types.non_pathological_historyUpsertInput,
        include: Optional[types.non_pathological_historyInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.non_pathological_history,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.non_pathological_historyUpdateManyMutationInput,
        where: types.non_pathological_historyWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.non_pathological_history,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.non_pathological_historyWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.non_pathological_history,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class nutritional_dietBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.nutritional_dietCreateInput,
        include: Optional[types.nutritional_dietInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.nutritional_diet,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.nutritional_dietCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.nutritional_diet,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.nutritional_dietWhereUniqueInput,
        include: Optional[types.nutritional_dietInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.nutritional_diet,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.nutritional_dietUpdateInput,
        where: types.nutritional_dietWhereUniqueInput,
        include: Optional[types.nutritional_dietInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.nutritional_diet,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.nutritional_dietWhereUniqueInput,
        data: types.nutritional_dietUpsertInput,
        include: Optional[types.nutritional_dietInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.nutritional_diet,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.nutritional_dietUpdateManyMutationInput,
        where: types.nutritional_dietWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.nutritional_diet,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.nutritional_dietWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.nutritional_diet,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class obstetric_gynecological_historyBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.obstetric_gynecological_historyCreateInput,
        include: Optional[types.obstetric_gynecological_historyInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.obstetric_gynecological_history,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.obstetric_gynecological_historyCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.obstetric_gynecological_history,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.obstetric_gynecological_historyWhereUniqueInput,
        include: Optional[types.obstetric_gynecological_historyInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.obstetric_gynecological_history,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.obstetric_gynecological_historyUpdateInput,
        where: types.obstetric_gynecological_historyWhereUniqueInput,
        include: Optional[types.obstetric_gynecological_historyInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.obstetric_gynecological_history,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.obstetric_gynecological_historyWhereUniqueInput,
        data: types.obstetric_gynecological_historyUpsertInput,
        include: Optional[types.obstetric_gynecological_historyInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.obstetric_gynecological_history,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.obstetric_gynecological_historyUpdateManyMutationInput,
        where: types.obstetric_gynecological_historyWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.obstetric_gynecological_history,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.obstetric_gynecological_historyWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.obstetric_gynecological_history,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class pacientesBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.pacientesCreateInput,
        include: Optional[types.pacientesInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.pacientes,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.pacientesCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.pacientes,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.pacientesWhereUniqueInput,
        include: Optional[types.pacientesInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.pacientes,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.pacientesUpdateInput,
        where: types.pacientesWhereUniqueInput,
        include: Optional[types.pacientesInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.pacientes,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.pacientesWhereUniqueInput,
        data: types.pacientesUpsertInput,
        include: Optional[types.pacientesInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.pacientes,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.pacientesUpdateManyMutationInput,
        where: types.pacientesWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.pacientes,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.pacientesWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.pacientes,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class pathological_historyBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.pathological_historyCreateInput,
        include: Optional[types.pathological_historyInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.pathological_history,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.pathological_historyCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.pathological_history,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.pathological_historyWhereUniqueInput,
        include: Optional[types.pathological_historyInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.pathological_history,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.pathological_historyUpdateInput,
        where: types.pathological_historyWhereUniqueInput,
        include: Optional[types.pathological_historyInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.pathological_history,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.pathological_historyWhereUniqueInput,
        data: types.pathological_historyUpsertInput,
        include: Optional[types.pathological_historyInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.pathological_history,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.pathological_historyUpdateManyMutationInput,
        where: types.pathological_historyWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.pathological_history,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.pathological_historyWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.pathological_history,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class patient_by_userBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.patient_by_userCreateInput,
        include: Optional[types.patient_by_userInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.patient_by_user,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.patient_by_userCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.patient_by_user,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.patient_by_userWhereUniqueInput,
        include: Optional[types.patient_by_userInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.patient_by_user,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.patient_by_userUpdateInput,
        where: types.patient_by_userWhereUniqueInput,
        include: Optional[types.patient_by_userInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.patient_by_user,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.patient_by_userWhereUniqueInput,
        data: types.patient_by_userUpsertInput,
        include: Optional[types.patient_by_userInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.patient_by_user,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.patient_by_userUpdateManyMutationInput,
        where: types.patient_by_userWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.patient_by_user,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.patient_by_userWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.patient_by_user,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class perinatal_historyBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.perinatal_historyCreateInput,
        include: Optional[types.perinatal_historyInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.perinatal_history,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.perinatal_historyCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.perinatal_history,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.perinatal_historyWhereUniqueInput,
        include: Optional[types.perinatal_historyInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.perinatal_history,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.perinatal_historyUpdateInput,
        where: types.perinatal_historyWhereUniqueInput,
        include: Optional[types.perinatal_historyInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.perinatal_history,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.perinatal_historyWhereUniqueInput,
        data: types.perinatal_historyUpsertInput,
        include: Optional[types.perinatal_historyInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.perinatal_history,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.perinatal_historyUpdateManyMutationInput,
        where: types.perinatal_historyWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.perinatal_history,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.perinatal_historyWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.perinatal_history,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class postnatal_historyBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.postnatal_historyCreateInput,
        include: Optional[types.postnatal_historyInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.postnatal_history,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.postnatal_historyCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.postnatal_history,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.postnatal_historyWhereUniqueInput,
        include: Optional[types.postnatal_historyInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.postnatal_history,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.postnatal_historyUpdateInput,
        where: types.postnatal_historyWhereUniqueInput,
        include: Optional[types.postnatal_historyInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.postnatal_history,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.postnatal_historyWhereUniqueInput,
        data: types.postnatal_historyUpsertInput,
        include: Optional[types.postnatal_historyInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.postnatal_history,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.postnatal_historyUpdateManyMutationInput,
        where: types.postnatal_historyWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.postnatal_history,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.postnatal_historyWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.postnatal_history,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class psychiatric_historyBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.psychiatric_historyCreateInput,
        include: Optional[types.psychiatric_historyInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.psychiatric_history,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.psychiatric_historyCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.psychiatric_history,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.psychiatric_historyWhereUniqueInput,
        include: Optional[types.psychiatric_historyInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.psychiatric_history,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.psychiatric_historyUpdateInput,
        where: types.psychiatric_historyWhereUniqueInput,
        include: Optional[types.psychiatric_historyInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.psychiatric_history,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.psychiatric_historyWhereUniqueInput,
        data: types.psychiatric_historyUpsertInput,
        include: Optional[types.psychiatric_historyInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.psychiatric_history,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.psychiatric_historyUpdateManyMutationInput,
        where: types.psychiatric_historyWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.psychiatric_history,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.psychiatric_historyWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.psychiatric_history,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class usersBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.usersCreateInput,
        include: Optional[types.usersInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.users,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.usersCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.users,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.usersWhereUniqueInput,
        include: Optional[types.usersInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.users,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.usersUpdateInput,
        where: types.usersWhereUniqueInput,
        include: Optional[types.usersInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.users,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.usersWhereUniqueInput,
        data: types.usersUpsertInput,
        include: Optional[types.usersInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.users,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.usersUpdateManyMutationInput,
        where: types.usersWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.users,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.usersWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.users,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class vaccinesBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.vaccinesCreateInput,
        include: Optional[types.vaccinesInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.vaccines,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.vaccinesCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.vaccines,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.vaccinesWhereUniqueInput,
        include: Optional[types.vaccinesInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.vaccines,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.vaccinesUpdateInput,
        where: types.vaccinesWhereUniqueInput,
        include: Optional[types.vaccinesInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.vaccines,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.vaccinesWhereUniqueInput,
        data: types.vaccinesUpsertInput,
        include: Optional[types.vaccinesInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.vaccines,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.vaccinesUpdateManyMutationInput,
        where: types.vaccinesWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.vaccines,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.vaccinesWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.vaccines,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class vital_signsBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.vital_signsCreateInput,
        include: Optional[types.vital_signsInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.vital_signs,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.vital_signsCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.vital_signs,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.vital_signsWhereUniqueInput,
        include: Optional[types.vital_signsInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.vital_signs,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.vital_signsUpdateInput,
        where: types.vital_signsWhereUniqueInput,
        include: Optional[types.vital_signsInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.vital_signs,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.vital_signsWhereUniqueInput,
        data: types.vital_signsUpsertInput,
        include: Optional[types.vital_signsInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.vital_signs,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.vital_signsUpdateManyMutationInput,
        where: types.vital_signsWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.vital_signs,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.vital_signsWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.vital_signs,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class ketosisBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.ketosisCreateInput,
        include: Optional[types.ketosisInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.ketosis,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.ketosisCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.ketosis,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.ketosisWhereUniqueInput,
        include: Optional[types.ketosisInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.ketosis,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.ketosisUpdateInput,
        where: types.ketosisWhereUniqueInput,
        include: Optional[types.ketosisInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.ketosis,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.ketosisWhereUniqueInput,
        data: types.ketosisUpsertInput,
        include: Optional[types.ketosisInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.ketosis,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.ketosisUpdateManyMutationInput,
        where: types.ketosisWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.ketosis,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.ketosisWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.ketosis,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class lab_requests_and_imageBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.lab_requests_and_imageCreateInput,
        include: Optional[types.lab_requests_and_imageInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.lab_requests_and_image,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.lab_requests_and_imageCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.lab_requests_and_image,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.lab_requests_and_imageWhereUniqueInput,
        include: Optional[types.lab_requests_and_imageInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.lab_requests_and_image,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.lab_requests_and_imageUpdateInput,
        where: types.lab_requests_and_imageWhereUniqueInput,
        include: Optional[types.lab_requests_and_imageInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.lab_requests_and_image,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.lab_requests_and_imageWhereUniqueInput,
        data: types.lab_requests_and_imageUpsertInput,
        include: Optional[types.lab_requests_and_imageInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.lab_requests_and_image,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.lab_requests_and_imageUpdateManyMutationInput,
        where: types.lab_requests_and_imageWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.lab_requests_and_image,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.lab_requests_and_imageWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.lab_requests_and_image,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class medical_diagnosisBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.medical_diagnosisCreateInput,
        include: Optional[types.medical_diagnosisInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.medical_diagnosis,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.medical_diagnosisCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.medical_diagnosis,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.medical_diagnosisWhereUniqueInput,
        include: Optional[types.medical_diagnosisInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.medical_diagnosis,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.medical_diagnosisUpdateInput,
        where: types.medical_diagnosisWhereUniqueInput,
        include: Optional[types.medical_diagnosisInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.medical_diagnosis,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.medical_diagnosisWhereUniqueInput,
        data: types.medical_diagnosisUpsertInput,
        include: Optional[types.medical_diagnosisInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.medical_diagnosis,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.medical_diagnosisUpdateManyMutationInput,
        where: types.medical_diagnosisWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.medical_diagnosis,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.medical_diagnosisWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.medical_diagnosis,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class medical_prescriptionBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.medical_prescriptionCreateInput,
        include: Optional[types.medical_prescriptionInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.medical_prescription,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.medical_prescriptionCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.medical_prescription,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.medical_prescriptionWhereUniqueInput,
        include: Optional[types.medical_prescriptionInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.medical_prescription,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.medical_prescriptionUpdateInput,
        where: types.medical_prescriptionWhereUniqueInput,
        include: Optional[types.medical_prescriptionInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.medical_prescription,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.medical_prescriptionWhereUniqueInput,
        data: types.medical_prescriptionUpsertInput,
        include: Optional[types.medical_prescriptionInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.medical_prescription,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.medical_prescriptionUpdateManyMutationInput,
        where: types.medical_prescriptionWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.medical_prescription,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.medical_prescriptionWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.medical_prescription,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class medical_prescription_detailBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.medical_prescription_detailCreateInput,
        include: Optional[types.medical_prescription_detailInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.medical_prescription_detail,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.medical_prescription_detailCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.medical_prescription_detail,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.medical_prescription_detailWhereUniqueInput,
        include: Optional[types.medical_prescription_detailInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.medical_prescription_detail,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.medical_prescription_detailUpdateInput,
        where: types.medical_prescription_detailWhereUniqueInput,
        include: Optional[types.medical_prescription_detailInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.medical_prescription_detail,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.medical_prescription_detailWhereUniqueInput,
        data: types.medical_prescription_detailUpsertInput,
        include: Optional[types.medical_prescription_detailInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.medical_prescription_detail,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.medical_prescription_detailUpdateManyMutationInput,
        where: types.medical_prescription_detailWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.medical_prescription_detail,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.medical_prescription_detailWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.medical_prescription_detail,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class medical_procedureBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.medical_procedureCreateInput,
        include: Optional[types.medical_procedureInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.medical_procedure,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.medical_procedureCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.medical_procedure,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.medical_procedureWhereUniqueInput,
        include: Optional[types.medical_procedureInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.medical_procedure,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.medical_procedureUpdateInput,
        where: types.medical_procedureWhereUniqueInput,
        include: Optional[types.medical_procedureInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.medical_procedure,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.medical_procedureWhereUniqueInput,
        data: types.medical_procedureUpsertInput,
        include: Optional[types.medical_procedureInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.medical_procedure,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.medical_procedureUpdateManyMutationInput,
        where: types.medical_procedureWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.medical_procedure,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.medical_procedureWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.medical_procedure,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class phsycal_examinationBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.phsycal_examinationCreateInput,
        include: Optional[types.phsycal_examinationInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.phsycal_examination,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.phsycal_examinationCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.phsycal_examination,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.phsycal_examinationWhereUniqueInput,
        include: Optional[types.phsycal_examinationInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.phsycal_examination,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.phsycal_examinationUpdateInput,
        where: types.phsycal_examinationWhereUniqueInput,
        include: Optional[types.phsycal_examinationInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.phsycal_examination,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.phsycal_examinationWhereUniqueInput,
        data: types.phsycal_examinationUpsertInput,
        include: Optional[types.phsycal_examinationInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.phsycal_examination,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.phsycal_examinationUpdateManyMutationInput,
        where: types.phsycal_examinationWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.phsycal_examination,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.phsycal_examinationWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.phsycal_examination,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class topographic_explorationBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.topographic_explorationCreateInput,
        include: Optional[types.topographic_explorationInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.topographic_exploration,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.topographic_explorationCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.topographic_exploration,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.topographic_explorationWhereUniqueInput,
        include: Optional[types.topographic_explorationInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.topographic_exploration,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.topographic_explorationUpdateInput,
        where: types.topographic_explorationWhereUniqueInput,
        include: Optional[types.topographic_explorationInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.topographic_exploration,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.topographic_explorationWhereUniqueInput,
        data: types.topographic_explorationUpsertInput,
        include: Optional[types.topographic_explorationInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.topographic_exploration,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.topographic_explorationUpdateManyMutationInput,
        where: types.topographic_explorationWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.topographic_exploration,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.topographic_explorationWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.topographic_exploration,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class lab_results_by_medical_consultationBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.lab_results_by_medical_consultationCreateInput,
        include: Optional[types.lab_results_by_medical_consultationInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.lab_results_by_medical_consultation,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.lab_results_by_medical_consultationCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.lab_results_by_medical_consultation,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.lab_results_by_medical_consultationWhereUniqueInput,
        include: Optional[types.lab_results_by_medical_consultationInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.lab_results_by_medical_consultation,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.lab_results_by_medical_consultationUpdateInput,
        where: types.lab_results_by_medical_consultationWhereUniqueInput,
        include: Optional[types.lab_results_by_medical_consultationInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.lab_results_by_medical_consultation,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.lab_results_by_medical_consultationWhereUniqueInput,
        data: types.lab_results_by_medical_consultationUpsertInput,
        include: Optional[types.lab_results_by_medical_consultationInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.lab_results_by_medical_consultation,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.lab_results_by_medical_consultationUpdateManyMutationInput,
        where: types.lab_results_by_medical_consultationWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.lab_results_by_medical_consultation,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.lab_results_by_medical_consultationWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.lab_results_by_medical_consultation,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class event_patientBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.event_patientCreateInput,
        include: Optional[types.event_patientInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.event_patient,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.event_patientCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.event_patient,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.event_patientWhereUniqueInput,
        include: Optional[types.event_patientInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.event_patient,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.event_patientUpdateInput,
        where: types.event_patientWhereUniqueInput,
        include: Optional[types.event_patientInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.event_patient,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.event_patientWhereUniqueInput,
        data: types.event_patientUpsertInput,
        include: Optional[types.event_patientInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.event_patient,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.event_patientUpdateManyMutationInput,
        where: types.event_patientWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.event_patient,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.event_patientWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.event_patient,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class event_prospective_patientBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.event_prospective_patientCreateInput,
        include: Optional[types.event_prospective_patientInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.event_prospective_patient,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.event_prospective_patientCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.event_prospective_patient,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.event_prospective_patientWhereUniqueInput,
        include: Optional[types.event_prospective_patientInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.event_prospective_patient,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.event_prospective_patientUpdateInput,
        where: types.event_prospective_patientWhereUniqueInput,
        include: Optional[types.event_prospective_patientInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.event_prospective_patient,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.event_prospective_patientWhereUniqueInput,
        data: types.event_prospective_patientUpsertInput,
        include: Optional[types.event_prospective_patientInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.event_prospective_patient,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.event_prospective_patientUpdateManyMutationInput,
        where: types.event_prospective_patientWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.event_prospective_patient,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.event_prospective_patientWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.event_prospective_patient,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class eventsBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.eventsCreateInput,
        include: Optional[types.eventsInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.events,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.eventsCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.events,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.eventsWhereUniqueInput,
        include: Optional[types.eventsInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.events,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.eventsUpdateInput,
        where: types.eventsWhereUniqueInput,
        include: Optional[types.eventsInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.events,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.eventsWhereUniqueInput,
        data: types.eventsUpsertInput,
        include: Optional[types.eventsInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.events,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.eventsUpdateManyMutationInput,
        where: types.eventsWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.events,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.eventsWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.events,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class prospective_patientsBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.prospective_patientsCreateInput,
        include: Optional[types.prospective_patientsInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.prospective_patients,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.prospective_patientsCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.prospective_patients,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.prospective_patientsWhereUniqueInput,
        include: Optional[types.prospective_patientsInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.prospective_patients,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.prospective_patientsUpdateInput,
        where: types.prospective_patientsWhereUniqueInput,
        include: Optional[types.prospective_patientsInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.prospective_patients,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.prospective_patientsWhereUniqueInput,
        data: types.prospective_patientsUpsertInput,
        include: Optional[types.prospective_patientsInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.prospective_patients,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.prospective_patientsUpdateManyMutationInput,
        where: types.prospective_patientsWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.prospective_patients,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.prospective_patientsWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.prospective_patients,
            arguments={'where': where},
            root_selection=['count'],
        )



Client = Prisma